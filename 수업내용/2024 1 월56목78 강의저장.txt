//---------------------------------------------------------------------
// 2024.3.4 월 (1 / 1)
// 기본 컴파일 환경
// 17.9 이상의 visual studio
// Release/x64, project 속성 - std:: c++ latest
// 콘솔창 크기 :80? 85?  너비: 25
// 1주차 - 소스파일 save 기능
//---------------------------------------------------------------------

#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
using namespace std;

void save(string_view);

int main()
{
	cout << "2024 STL" << endl;

	save("FileName.cpp");
}

void save(string_view filename)
{
	// 읽을 파일을 연다
	ifstream in{ filename.data() };

	if (!in) {
		cout << "파일을 열지 못함" << endl;
		exit(0);
	}

	// 쓸 파일을 덧붙이기 모드로 연다
	
	ofstream out("2024 1 월56목78 강의저장.txt", ios::app);

	// 읽을 파일의 모든 내용을 읽어 쓸 파일에 덧붙인다.

	vector<char> v{ istreambuf_iterator<char>{in},{} };
	
	copy(v.begin(), v.end(), ostreambuf_iterator<char>{out});
}//---------------------------------------------------------------------
// 2024.3.4 월 (1 / 1)
// 기본 컴파일 환경
// 17.9 이상의 visual studio
// Release/x64, project 속성 - std:: c++ latest
// 콘솔창 크기 :80? 85?  너비: 25
// 1주차 - 소스파일 save 기능
//---------------------------------------------------------------------

#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
using namespace std;

void save(string_view);

int main()
{
	cout << "2024 STL" << endl;

	save("FileName.cpp");
}

void save(string_view filename)
{
	// 읽을 파일을 연다
	ifstream in{ filename.data() };

	if (!in) {
		cout << "파일을 열지 못함" << endl;
		exit(0);
	}

	// 쓸 파일을 덧붙이기 모드로 연다
	
	ofstream out("2024 1 월56목78 강의저장.txt", ios::app);

	// 읽을 파일의 모든 내용을 읽어 쓸 파일에 덧붙인다.

	vector<char> v{ istreambuf_iterator<char>{in},{} };
	
	copy(v.begin(), v.end(), ostreambuf_iterator<char>{out});
}//---------------------------------------------------------------------
// 2024.3.4 월 (1 / 1)
// 기본 컴파일 환경
// 17.9 이상의 visual studio
// Release/x64, project 속성 - std:: c++ latest
// 콘솔창 크기 :80? 85?  너비: 25
// 1주차 - 소스파일 save 기능
//---------------------------------------------------------------------

#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>
using namespace std;

void save(string_view);

int main()
{
	cout << "2024 STL" << endl;

	save("FileName.cpp");
}

void save(string_view filename)
{
	// 읽을 파일을 연다
	ifstream in{ filename.data() };

	if (!in) {
		cout << "파일을 열지 못함" << endl;
		exit(0);
	}

	// 쓸 파일을 덧붙이기 모드로 연다
	
	ofstream out("2024 1 월56목78 강의저장.txt", ios::app);

	// 저장된 시간을 파일에 기록한다

	auto now = chrono::system_clock::now();
	cout << now << endl;
	//auto time = chrono::system_clock::to_time_t(now); // utc 시간으로 변환
	//auto lt = localtime(&time);		// 현지 시간으로 변환

	// 읽을 파일의 모든 내용을 읽어 쓸 파일에 덧붙인다.

	vector<char> v{ istreambuf_iterator<char>{in},{} };
	
	copy(v.begin(), v.end(), ostreambuf_iterator<char>{out});
}

===================================
FileName.cpp, 저장 시간: 2024-03-04 월요일 오후 2:56:42
===================================
//---------------------------------------------------------------------
// 2024.3.4 월 (1 / 1)
// 기본 컴파일 환경
// 17.9 이상의 visual studio
// Release/x64, project 속성 - std:: c++ latest, SDL - no
// 콘솔창 크기 :80? 85?  너비: 25
// 1주차 - 소스파일 save 기능
//---------------------------------------------------------------------

#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>
using namespace std;

void save(string_view);

int main()
{
	cout << "2024 STL" << endl;

	save("FileName.cpp");
}

void save(string_view filename)
{
	// 읽을 파일을 연다
	ifstream in{ filename.data() };

	if (!in) {
		cout << "파일을 열지 못함" << endl;
		exit(0);
	}

	// 쓸 파일을 덧붙이기 모드로 연다
	
	ofstream out("2024 1 월56목78 강의저장.txt", ios::app);

	// 저장된 시간을 파일에 기록한다

	auto now = chrono::system_clock::now();
	auto time = chrono::system_clock::to_time_t(now); // utc 시간으로 변환
	auto lt = localtime(&time);		// 현지 시간으로 변환
	auto old = out.imbue(locale("ko_KR"));
	out << endl << endl;
	out << "===================================" << endl;
	out << filename << put_time(lt, ", 저장 시간: %x %A %X") << endl;
	out << "===================================" << endl;
	out.imbue(old);
	// 읽을 파일의 모든 내용을 읽어 쓸 파일에 덧붙인다.

	vector<char> v{ istreambuf_iterator<char>{in},{} };
	
	copy(v.begin(), v.end(), ostreambuf_iterator<char>{out});
}

===================================
save.h, 저장 시간: 2024-03-07 목요일 오후 3:39:57
===================================
//-----------------------------------------------------------
// save.h	한 학기 강의를 저장한다
// 
// 2024.03.07 
//-----------------------------------------------------------

#pragma once
#include <string_view>

void save(std::string_view );

===================================
save.cpp, 저장 시간: 2024-03-07 목요일 오후 3:39:57
===================================
//-----------------------------------------------------------
// save.cpp		한 학기 강의를 저장한다.
// 
// 2024.03.07
//-----------------------------------------------------------
#include <string_view>
#include <fstream>
#include <iostream>
#include <chrono>
#include <vector>
#include <algorithm>

#include "save.h"


void save(std::string_view filename)
{
	// 읽을 파일을 연다
	std::ifstream in{ filename.data() };

	if (!in) {
		std::cout << "파일을 열지 못함" << '\n';
		exit(0);
	}

	// 쓸 파일을 덧붙이기 모드로 연다

	std::ofstream out("2024 1 월56목78 강의저장.txt", std::ios::app);

	// 저장된 시간을 파일에 기록한다

	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now); // utc 시간으로 변환
	auto lt = localtime(&time);		// 현지 시간으로 변환
	auto old = out.imbue(std::locale("ko_KR"));
	out << '\n' << '\n';
	out << "===================================" << '\n';
	out << filename << std::put_time(lt, ", 저장 시간: %x %A %X") << '\n';
	out << "===================================" << '\n';
	out.imbue(old);
	// 읽을 파일의 모든 내용을 읽어 쓸 파일에 덧붙인다.

	std::vector<char> v{ std::istreambuf_iterator<char>{in},{} };

	copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

===================================
FileName.cpp, 저장 시간: 2024-03-07 목요일 오후 3:39:57
===================================
//---------------------------------------------------------------------
// 2024.3.7 목											    (1주 / 2일)
// 
// 1주차 - 소스파일 save 기능
//---------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;


int main()
{
	save("save.h");
	save("save.cpp");
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-07 목요일 오후 3:42:15
====================================================

//---------------------------------------------------------------------
// 2024.3.7 목											    (1주 / 2일)
// 
// 1주차 - 소스파일 save 기능
//---------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;


int main()
{
	save("FileName.cpp");
}


====================================================
FileName.cpp, 저장 시간: 2024-03-07 목요일 오후 3:46:35
====================================================

//---------------------------------------------------------------------
// 2024.3.7 목		                                        (1주 / 2일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

void change(int&, int&);
// [문제] main()을 변경하면 안된다. 함수 change()를 선언하고 정의하라
int main()
{
	int a{ 1 }, b{ 2 };

	change(a, b);
	cout << a << ", " << b << endl;    // [출력] 2,1

	save("FileName.cpp");
}
void change(int& a, int& b)
{
	int temp{ a };
	a = b;
	b = temp;
}


====================================================
FileName.cpp, 저장 시간: 2024-03-07 목요일 오후 4:47:40
====================================================

//---------------------------------------------------------------------
// 2024.3.7 목		                                        (1주 / 2일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] main()을 변경하면 안된다. 함수 change()를 선언하고 정의하라

class Dog;	// 전방 선언,forward declaration

void change(int&, int&);
void change(Dog&, Dog&);

class Dog {
public:
	Dog(int a) : num{ a } {};
	// Dog(const Dog& other) -> special 함수 (컴파일러 자동생성)
	friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os << dog.num;
	}
private:
	int num;
};




int main()
{
	Dog a{ 1 }, b{ 2 };

	change(a, b);
	cout << a << ", " << b << endl;    // [출력] 2,1

	save("FileName.cpp");
}

void change(int& a, int& b)
{
	int temp{ a };
	a = b;
	b = temp;
}
void change(Dog& a, Dog& b)
{
	Dog temp{ a };  // copy construction
	a = b;
	b = temp;
}


====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 1:32:51
====================================================

//---------------------------------------------------------------------
// 2024.3.7 목		                                        (1주 / 2일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] main()을 변경하면 안된다. 함수 change()를 선언하고 정의하라

class Dog;	// 전방 선언,forward declaration

template<class T>
void change(T&, T&);

class Dog {
public:
	Dog(int a) : num{ a } {};
	// Dog(const Dog& other) -> special 함수 (컴파일러 자동생성)

	/*friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os << dog.num;
	}*/

	operator int() {
		return num;
	}

private:
	int num;
};




int main()
{
	Dog a{ 1 }, b{ 2 };

	change(a, b);
	cout << a << ", " << b << endl;    // [출력] 2,1

	save("FileName.cpp");
}

template<class T>
void change(T& a, T& b)
{
	T temp{ a };  // copy construction
	a = b;
	b = temp;
}


====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 1:50:41
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 값이 가장 큰 수를 찾아 화면에 출력하라.

	int a[100];
int main()
{

	for (int num : a) 
		cout << num << '\t';

	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 1:50:51
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 값이 가장 큰 수를 찾아 화면에 출력하라.

int main()
{
	int a[100];

	for (int num : a) 
		cout << num << '\t';

	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 1:51:51
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 값이 가장 큰 수를 찾아 화면에 출력하라.

int main()
{
	int a[100]{};

	for (int num : a) 
		cout << num << '\t';

	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 1:55:06
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 값이 가장 큰 수를 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0,99999 };

int main()
{
	int a[100];
	for (int& num : a)
		num = uid(dre);
	for (int num : a) 
		cout << num << '\t';

	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 1:57:55
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 값이 가장 큰 수를 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0,99999 };

int main()
{
	int a[100];
	for (int& num : a)
		num = uid(dre);
	for (int num : a)
		cout << format("{:8d}",num);

	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 1:58:47
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 값이 가장 큰 수를 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0,99999 };

int main()
{
	int a[100];
	for (int& num : a)
		num = uid(dre);
	for (int num : a)
		cout << format("{:^8d}",num);

	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 1:59:11
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 값이 가장 큰 수를 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0,99999 };

int main()
{
	int a[100];
	for (int& num : a)
		num = uid(dre);
	for (int num : a)
		cout << format("{:^8d}",num);

	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 1:59:22
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 값이 가장 큰 수를 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0,99999 };

int main()
{
	int a[100];
	for (int& num : a)
		num = uid(dre);
	for (int num : a)
		cout << format("{:^80d}",num);

	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 2:00:10
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 값이 가장 큰 수를 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0,99999 };

int main()
{
	int a[100];
	for (int& num : a)
		num = uid(dre);
	for (int num : a)
		print("{:8d}",num);

	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 2:05:12
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 값이 가장 큰 수를 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0,99999 };

int main()
{
	int a[100];
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		print("{:8d}",num);		//c++ 23

	// 가장 큰 값을 찾아 화면에 출력하라
	int max{ -1 };
	for (int num : a)
		if (num > max) max = num;
	cout << max;
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 2:10:18
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 값이 가장 큰 수를 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0,99999 };

int main()
{
	int a[100];
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		print("{:8d}",num);		//c++ 23

	// 가장 큰 값을 찾아 화면에 출력하라
	//int max{ *max_element(a,a + 100) };
	int max{ numeric_limits<int>::min()};
	for (int num : a)
		if (num > max) max = num;
	cout << " "<<max;

	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 2:17:16
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>
#include <algorithm>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 값이 가장 큰 수를 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0,99999 };

int main()
{
	int a[100];
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		print("{:8d}",num);		//c++ 23

	// 가장 큰 값을 찾아 화면에 출력하라

	int maxValue = *max_element(begin(a), end(a));
	
	cout << endl << maxValue;

	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 2:46:56
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>
#include <array>
#include <fstream>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 이 값을 파일"int천개.txt"에 기록하라.

default_random_engine dre;
uniform_int_distribution uid{ 0,99999 };

int main()
{
	array<int, 1000> a;

	for (int& num : a)
		num = uid(dre);

	// a에 있는 값을 파일에 기록하라.
	
	ofstream out{ "int천개.txt" };	//RAII	
	
	for (int num : a)
		print(out,"{:8}",num);
	
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 2:49:24
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>
#include <array>
#include <fstream>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 이 값을 파일"int천개.txt"에 기록하라.

default_random_engine dre;
uniform_int_distribution uid{ 0,99999 };

int main()
{
	array<int, 1000> a;

	for (int& num : a)
		num = uid(dre);

	// a에 있는 값을 파일에 기록하라.
	
	ofstream out{ "int천개.txt" };	//RAII	
	
	for (int num : a)
		print(out,"{} ",num);
	
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 2:52:15
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include <format>
#include <print>
#include <array>
#include <fstream>
#include "save.h"
using namespace std;

// 문제 - [0,99999] 값을 갖는 int 100개를 만들자.
// 이 값을 파일"int천개.txt"에 기록하라.

default_random_engine dre;
uniform_int_distribution uid{ 0,99999 };

int main()
{
	array<int, 1000> a;
	for (int& num : a)
		num = uid(dre);
	cout<< sizeof(a);

	// a에 있는 값을 파일에 기록하라.
	
	ofstream out{ "int천개.txt" };	//RAII	
	
	for (int num : a)
		print(out,"{} ",num);
	
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 3:08:34
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// 문제 - 파일 "int천개.txt"에는 int값 1000개가 숫자값 그대로 기록되어 있다.
// 값과 값은 공백으로 떨어져 있다.
// 이 파일에 있는 모든 값을 화면에 출력하라.

int main()
{
	ifstream in("int천개.txt");
	if (!in)
		exit(0);
	int num;
	while (in >> num)
		cout << num << "\t";
	
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 3:09:56
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// 문제 - 파일 "int천개.txt"에는 int값 1000개가 숫자값 그대로 기록되어 있다.
// 값과 값은 공백으로 떨어져 있다.
// 이 파일에 있는 모든 값을 화면에 출력하라.

int main()
{
	ifstream in("int천개.txt");
	if (!in)
		exit(0);
	int num;
	int count{};
	while (in >> num) {
		cout << num << "\t";
		++count;
	}
	cout << endl;
	cout << "갯수: " << count;
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 3:13:05
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// 문제 - 파일 "int천개.txt"에는 int값 1000개가 숫자값 그대로 기록되어 있다.
// 값과 값은 공백으로 떨어져 있다.
// 가장 큰 값을 찾아 화면에 출력하라

int main()
{
	ifstream in("int천개.txt");
	if (!in)
		exit(0);
	int num;
	int max{ numeric_limits<int>::min() };
	while (in >> num)
		if (max < num) max = num;

	cout << endl;
	cout << "최댓값: " << max;
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-11 월요일 오후 3:18:37
====================================================

//---------------------------------------------------------------------
// 2024.3.11 월		                                        (2주 / 1일)
// 
// C++ 복습
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// 문제 - 파일 "int천개.txt"에는 int값 1000개가 숫자값 그대로 기록되어 있다.
// 값과 값은 공백으로 떨어져 있다.
// 가장 큰 값을 찾아 화면에 출력하라

int main()
{
	ifstream in("int천개.txt");
	if (!in)
		exit(0);
	cout << "최댓값은 " << *max_element(istream_iterator<int>{in}, {});
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-14 목요일 오후 4:02:13
====================================================

//---------------------------------------------------------------------
// 2024.3.14 목		                                        (2주 / 2일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <numeric>
#include <print>
#include "save.h"

using namespace std;

// 문제 - int 100개를 저장할 공간을 확보하자.
// int 값을 1부터 시작하는 정수로 채워라
// int 값을 파일 "int100개.txt" 에 저장하라


int main()
{
	array<int, 100> arr{ };
	iota(arr.begin(), arr.end(), 1);
	ofstream out("int100개.txt");
	for (int a : arr)
		print(out, "{:8}", a);
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-14 목요일 오후 4:03:58
====================================================

//---------------------------------------------------------------------
// 2024.3.14 목		                                        (2주 / 2일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <numeric>
#include <print>
#include "save.h"

using namespace std;

// 문제 - int 100개를 저장할 공간을 확보하자.
// int 값을 1부터 시작하는 정수로 채워라
// int 값을 파일 "int100개.txt" 에 저장하라


int main()
{
	array<int, 100> arr{ };
	iota(arr.begin(), arr.end(), 1);
	ofstream out("int100개.txt");

	// int값 100개를 저장하는데 필요한 메모리는 몇 바이트 인가?
	for (int a : arr)
		print(out, "{:8}", a);
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-14 목요일 오후 4:43:28
====================================================

//---------------------------------------------------------------------
// 2024.3.14 목		                                        (2주 / 2일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <numeric>
#include <print>
#include "save.h"

using namespace std;

// 문제 - int 100개를 저장할 공간을 확보하자.
// int 값을 1부터 시작하는 정수로 채워라
// int 값을 파일 "int100개.txt" 에 저장하라


int main()
{
	array<int, 100> arr{ };
	iota(arr.begin(), arr.end(), 1);
	ofstream out("int100개.txt");	// 2번째인자를  주지 않으면 text mode로 설정한다.
	
	out.write(reinterpret_cast<char*>(arr.data()), arr.size() * sizeof(int));
	// 401 bite인 이유 10번인 enter키가 2바이트를 차지함. 이는 os마다 다름
	
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-14 목요일 오후 4:43:55
====================================================

//---------------------------------------------------------------------
// 2024.3.14 목		                                        (2주 / 2일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <numeric>
#include <print>
#include "save.h"

using namespace std;

// 문제 - int 100개를 저장할 공간을 확보하자.
// int 값을 1부터 시작하는 정수로 채워라
// int 값을 파일 "int100개.txt" 에 저장하라


int main()
{
	array<int, 100> arr{ };
	iota(arr.begin(), arr.end(), 1);
	ofstream out("int100개.txt",ios::binary);	// 2번째인자를  주지 않으면 text mode로 설정한다.
	
	out.write(reinterpret_cast<char*>(arr.data()), arr.size() * sizeof(int));
	// 401 bite인 이유 10번인 enter키가 2바이트를 차지함. 이는 os마다 다름
	
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-14 목요일 오후 4:44:06
====================================================

//---------------------------------------------------------------------
// 2024.3.14 목		                                        (2주 / 2일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <numeric>
#include <print>
#include "save.h"

using namespace std;

// 문제 - int 100개를 저장할 공간을 확보하자.
// int 값을 1부터 시작하는 정수로 채워라
// int 값을 파일 "int100개.txt" 에 저장하라


int main()
{
	array<int, 100> arr{ };
	iota(arr.begin(), arr.end(), 1);
	ofstream out{ "int100개.txt",ios::binary };	// 2번째인자를  주지 않으면 text mode로 설정한다.
	
	out.write(reinterpret_cast<char*>(arr.data()), arr.size() * sizeof(int));
	// 401 bite인 이유 10번인 enter키가 2바이트를 차지함. 이는 os마다 다름
	
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-14 목요일 오후 4:46:09
====================================================

//---------------------------------------------------------------------
// 2024.3.14 목		                                        (2주 / 2일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <numeric>
#include <print>
#include "save.h"

using namespace std;

// 문제 - int 100개를 저장할 공간을 확보하자.
// int 값을 1부터 시작하는 정수로 채워라
// int 값을 파일 "int100개.txt" 에 저장하라


int main()
{
	array<char, 100> arr{};
	ofstream out{ "글자.txt" };	// 2번째인자를  주지 않으면 text mode로 설정한다.
	
	out.write(reinterpret_cast<char*>(arr.data()), arr.size() * sizeof(char));
	// 401 bite인 이유 10번인 enter키가 2바이트를 차지함. 이는 os마다 다름
	
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-14 목요일 오후 5:11:37
====================================================

//---------------------------------------------------------------------
// 2024.3.14 목		                                        (2주 / 2일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include "save.h"
using namespace std;

// [문제] 파일 "int천개"에는 int 값 1000개가 기록되어있다.
// 파일은 binary 모드로 열었으며, 기록할때 write 함수로 4000바이트로 기록하였다.
// 파일을 읽어 가장 큰 값을 출력하라.

int main()
{
	ifstream in{ "int천개",ios::binary };
	if (!in) {
		cout << "파일이 없습니다." << endl;
		exit(0);
	}
	array<int, 1000> a;
	in.read((char*)a.data(), sizeof(int) * a.size());
	cout << "최댓값 - " << *max_element(a.begin(), a.end());

	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-14 목요일 오후 5:22:26
====================================================

//---------------------------------------------------------------------
// 2024.3.14 목		                                        (2주 / 2일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include <array>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<int> uidC{ 'a','z' };
uniform_int_distribution uidNum{ -9999,9999 };


class Dog {
	char c{ static_cast<char>(uidC(dre)) };
	int num{ uidNum(dre) };
public:
	friend ostream& operator<< (ostream& os, const Dog& dog) {
		return os << "글자: " << dog.c << ", 숫자: " << dog.num;
	}
};

int main()
{
	array<Dog, 100> dogs;

	for (const Dog& dog : dogs)
		cout << dog << endl;
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-14 목요일 오후 5:24:33
====================================================

//---------------------------------------------------------------------
// 2024.3.14 목		                                        (2주 / 2일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <random>
#include <array>
#include <fstream>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<int> uidC{ 'a','z' };
uniform_int_distribution uidNum{ -9999,9999 };


class Dog {
	char c{ static_cast<char>(uidC(dre)) };
	int num{ uidNum(dre) };
public:
	friend ostream& operator<< (ostream& os, const Dog& dog) {
		return os << "글자: " << dog.c << ", 숫자: " << dog.num;
	}
};

int main()
{
	array<Dog, 100> dogs;


	ofstream out{ "개들",ios::binary };
	out.write((char*)dogs.data(), dogs.size() * sizeof(Dog));

	for (const Dog& dog : dogs)
		cout << dog << endl;
	save("FileName.cpp");
}



====================================================
FileName.cpp, 저장 시간: 2024-03-18 월요일 오후 1:42:07
====================================================

//---------------------------------------------------------------------
// 2024.3.18 월		                                        (3주 / 1일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include "save.h"
using namespace std;

// 문제 - "개들" 에는  Dog 100 객체가 기록되었다.
// binary mode, sizeof(Dog)*100 바이트를 기록하였다.
// Dog의 멤버는 아래와 같다.
// num 값이 가장 큰 Dog를 찾아 화면에 출력하라

class Dog {
	char c;
	int num;
public:
	void show() const {
		cout << "char - " << c << ", num - " << num << endl;
	}
};

int main()
{
	array<Dog, 100> dogs;
	ifstream in{ "개들" ,ios::binary };
	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
		return 0;
	}
	Dog dog;
	for (int i = 0;i < 100;++i) {
		in.read((char*)&dog, sizeof(dog));
		dog.show();
	}
	save("FileName.cpp");
}

====================================================
FileName.cpp, 저장 시간: 2024-03-18 월요일 오후 1:48:15
====================================================

//---------------------------------------------------------------------
// 2024.3.18 월		                                        (3주 / 1일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include "save.h"
using namespace std;

// 문제 - "개들" 에는  Dog 100 객체가 기록되었다.
// binary mode, sizeof(Dog)*100 바이트를 기록하였다.
// Dog의 멤버는 아래와 같다.
// num 값이 가장 큰 Dog를 찾아 화면에 출력하라

class Dog {
	char c;
	int num;
public:
	void show() const {
		cout << "char - " << c << ", num - " << num << endl;
	}
};

int main()
{
	ifstream in{ "개들" ,ios::binary };
	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
		return 0;
	}
	array<Dog, 100> dogs;
	in.read((char*)dogs.data(), sizeof(Dog) * 100);
	for (const Dog& dog : dogs)
		dog.show();
	save("FileName.cpp");
}

====================================================
FileName.cpp, 저장 시간: 2024-03-18 월요일 오후 1:55:55
====================================================

//---------------------------------------------------------------------
// 2024.3.18 월		                                        (3주 / 1일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include "save.h"
using namespace std;

// 문제 - "개들" 에는  Dog 객체가 기록되었다.
// binary mode, write 함수로 연속된 메모리를 그대로 한번에 기록하였다.
// Dog의 멤버는 아래와 같다.
// num 값이 가장 큰 Dog를 찾아 화면에 출력하라

class Dog {
	char c;
	int num;
public:
	void show() const {
		cout << "char - " << c << ", num - " << num << endl;
	}
	friend istream& operator>>(istream& is, Dog& dog) {
		is.read((char*)&dog, sizeof(Dog));
		return is;
	}
};

int main()
{
	ifstream in{ "개들" ,ios::binary };
	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
		return 0;
	}
	Dog dog;
	int count{};
	while (in >> dog)
		++count;
	cout << "개수 - " << count << endl;


	save("FileName.cpp");
}

====================================================
FileName.cpp, 저장 시간: 2024-03-18 월요일 오후 2:02:50
====================================================

//---------------------------------------------------------------------
// 2024.3.18 월		                                        (3주 / 1일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include "save.h"
using namespace std;

// 문제 - "개들" 에는  Dog 객체 100개가 기록되었다.
// binary mode, write 함수로 연속된 메모리를 그대로 한번에 기록하였다.
// Dog의 멤버는 아래와 같다.
// num 값이 가장 큰 Dog를 찾아 화면에 출력하라

class Dog {
	char c;
	int num;
public:
	int getNum() const{
		return num; 
	}

	void show() const {
		cout << "char - " << c << ", num - " << num << endl;
	}
};

int main()
{
	ifstream in{ "개들" ,ios::binary };
	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
		return 0;
	}
	array<Dog, 100> dogs;
	in.read((char*)dogs.data(), sizeof(Dog) * 100);

	// num 값이 가장 큰 Dog
	int maxValue{ numeric_limits<int>::min()};
	for (const Dog& dog : dogs)
		if (dog.getNum() > maxValue)
			maxValue = dog.getNum();
	cout << "최대값은  - " << maxValue << endl;

	save("FileName.cpp");
}

====================================================
FileName.cpp, 저장 시간: 2024-03-18 월요일 오후 2:05:03
====================================================

//---------------------------------------------------------------------
// 2024.3.18 월		                                        (3주 / 1일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include "save.h"
using namespace std;

// 문제 - "개들" 에는  Dog 객체 100개가 기록되었다.
// binary mode, write 함수로 연속된 메모리를 그대로 한번에 기록하였다.
// Dog의 멤버는 아래와 같다.
// num 값이 가장 큰 Dog를 찾아 화면에 출력하라

class Dog {
	char c;
	int num;
public:
	int getNum() const{
		return num; 
	}

	void show() const {
		cout << "char - " << c << ", num - " << num << endl;
	}
};

int main()
{
	ifstream in{ "개들" ,ios::binary };
	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
		return 0;
	}
	array<Dog, 100> dogs;
	in.read((char*)dogs.data(), sizeof(Dog) * 100);

	// num 값이 가장 큰 Dog
	int maxValue{ numeric_limits<int>::min()};
	Dog maxdog;
	for (const Dog& dog : dogs) {
		if (dog.getNum() > maxValue) {
			maxValue = dog.getNum();
			maxdog = dog;
		}
	}
	cout << "num 값이 가장 큰 Dog" << endl;
	maxdog.show();
	save("FileName.cpp");
}

====================================================
FileName.cpp, 저장 시간: 2024-03-18 월요일 오후 2:16:07
====================================================

//---------------------------------------------------------------------
// 2024.3.18 월		                                        (3주 / 1일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;

// 문제 - "개들" 에는  Dog 객체 100개가 기록되었다.
// binary mode, write 함수로 연속된 메모리를 그대로 한번에 기록하였다.
// Dog의 멤버는 아래와 같다.
// num 값이 가장 큰 Dog를 찾아 화면에 출력하라

class Dog {
	char c;
	int num;
public:
	int getNum() const{
		return num; 
	}

	void show() const {
		cout << "char - " << c << ", num - " << num << endl;
	}
};

int main()
{
	ifstream in{ "개들" ,ios::binary };
	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
		return 0;
	}
	array<Dog, 100> dogs;
	in.read((char*)dogs.data(), sizeof(Dog) * 100);

	// num 값이 가장 큰 Dog
	Dog maxdog = *max_element(dogs.begin(), dogs.end(), [](const Dog& a, const Dog& b) {
		return a.getNum() < b.getNum();
		});

	cout << "num 값이 가장 큰 Dog" << endl;
	maxdog.show();
	// char - y, num - 9929;
	save("FileName.cpp");
}

====================================================
FileName.cpp, 저장 시간: 2024-03-18 월요일 오후 2:17:51
====================================================

//---------------------------------------------------------------------
// 2024.3.18 월		                                        (3주 / 1일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;

// 문제 - "개들" 에는  Dog 객체 100개가 기록되었다.
// binary mode, write 함수로 연속된 메모리를 그대로 한번에 기록하였다.
// Dog의 멤버는 아래와 같다.
// num 값이 가장 큰 Dog를 찾아 화면에 출력하라

class Dog {
	char c;
	int num;
public:
	int getNum() const{
		return num; 
	}

	void show() const {
		cout << "char - " << c << ", num - " << num << endl;
	}
};

int main()
{
	ifstream in{ "개들" ,ios::binary };
	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
		return 0;
	}
	array<Dog, 100> dogs;
	in.read((char*)dogs.data(), sizeof(Dog) * 100);

	// num 값이 가장 큰 Dog
	auto pos = max_element(dogs.begin(), dogs.end(), [](const Dog& a, const Dog& b) {
		return a.getNum() < b.getNum();
		});

	cout << "num 값이 가장 큰 Dog" << endl;
	pos->show();
	// char - y, num - 9929;
	save("FileName.cpp");
}

====================================================
FileName.cpp, 저장 시간: 2024-03-18 월요일 오후 2:28:03
====================================================

//---------------------------------------------------------------------
// 2024.3.18 월		                                        (3주 / 1일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;

// 문제 - "개들" 에는  Dog 객체 100개가 기록되었다.
// binary mode, write 함수로 연속된 메모리를 그대로 한번에 기록하였다.
// Dog의 멤버는 아래와 같다.
// num 값이 가장 큰 Dog를 찾아 화면에 출력하라

class Dog {
	char c;
	int num;
public:
	int getNum() const{
		return num; 
	}

	void show() const {
		cout << "char - " << c << ", num - " << num << endl;
	}
};

int main()
{
	ifstream in{ "개들" ,ios::binary };
	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
		return 0;
	}
	array<Dog, 100> dogs;
	in.read((char*)dogs.data(), sizeof(Dog) * 100);

	// [문제] - num 값이 음수인 Dog의 개수를 출력하라
	int cnt{};
	for (const Dog& dog : dogs) {
		if (dog.getNum() < 0)
			++cnt;
	}

	cout << "num 값이 음수인 Dog의 개수 - " << cnt << endl;

	// num 값이 가장 큰 Dog
	auto pos = max_element(dogs.begin(), dogs.end(), [](const Dog& a, const Dog& b) {
		return a.getNum() < b.getNum();
		});

	cout << "num 값이 가장 큰 Dog" << endl;
	pos->show();
	// char - y, num - 9929;
	save("FileName.cpp");
}

====================================================
FileName.cpp, 저장 시간: 2024-03-18 월요일 오후 2:37:20
====================================================

//---------------------------------------------------------------------
// 2024.3.18 월		                                        (3주 / 1일)
// 
// 파일 I/O
//---------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;

// 문제 - "개들" 에는  Dog 객체 100개가 기록되었다.
// binary mode, write 함수로 연속된 메모리를 그대로 한번에 기록하였다.
// Dog의 멤버는 아래와 같다.
// num 값이 가장 큰 Dog를 찾아 화면에 출력하라

class Dog {
	char c;
	int num;
public:
	int getNum() const{
		return num; 
	}

	void show() const {
		cout << "char - " << c << ", num - " << num << endl;
	}
};

int main()
{
	ifstream in{ "개들" ,ios::binary };
	if (!in) {
		cout << "파일을 열 수 없습니다." << endl;
		return 0;
	}
	array<Dog, 100> dogs;
	in.read((char*)dogs.data(), sizeof(Dog) * 100);

	// [문제] - num 값이 음수인 Dog의 개수를 출력하라
	int cnt = count_if(dogs.begin(), dogs.end(), [](const Dog& dog) {
		return 0 > dog.getNum();
		});

	cout << "num 값이 음수인 Dog의 개수 - " << cnt << endl;

	
	
	save("FileName.cpp");
}

====================================================
FileName.cpp, 저장 시간: 2024-03-18 월요일 오후 3:03:26
====================================================

//---------------------------------------------------------------------
// 2024.3.18 월		                                        (3주 / 1일)
// 
// 실행 파일의 메모리 영역 - STACK, DATA, CODE, free store(heap)
//---------------------------------------------------------------------

#include <iostream>
#include <array>
#include <string>
#include "save.h"
using namespace std;

char gc;	// DATA
int gnum;

void f();	// CODE

int main()
{
	array<int, 10> a;		// int 10개의 주소를 출력하라
	cout << "STACK - array" << endl;
	for (int& num : a)
		cout << addressof(num) << endl;
	cout << endl;
	string s{ "안녕하세요. 메모리 영역 확인중 입니다." };

	cout <<"STACK - string, " << addressof(s) << endl;

	cout << endl;
	cout << "DATA segment" << endl;
	//cout << "전역 char, " << addressof(gc) << endl;	// 화면에 왜 안나오는가
	cout << "전역 int, " << addressof(gnum) << endl;
	
	cout << endl;
	cout << "CODE - 함수가 기록되어 있는 곳" << endl;
	cout << "main 함수, " << addressof(main) << endl;
	cout << "save 함수, " << addressof(save) << endl;
	cout << "f 함수, " << addressof(f) << endl;


	double* p = new double[10];
	cout << endl;
	cout << "free store - 자유 메모리 공간" << endl;
	for (int i = 0;i < 10;++i)
		cout << addressof(p[i]) << endl;

	delete(p);
	save("FileName.cpp");
}

void f()
{
	cout << "함수다." << endl;
}